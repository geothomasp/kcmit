DROP TABLE OSP$AWARD_REPORT_TERMS 
/
CREATE TABLE OSP$AWARD_REPORT_TERMS 
   (MIT_AWARD_NUMBER	CHAR(10 BYTE), 
	  SEQUENCE_NUMBER NUMBER(4,0), 
	  REPORT_CLASS_CODE VARCHAR2(40 BYTE), 
	  REPORT_CODE VARCHAR2(40 BYTE), 
	  FREQUENCY_CODE VARCHAR2(40 BYTE), 
	  FREQUENCY_BASE_CODE VARCHAR2(40 BYTE), 
	  OSP_DISTRIBUTION_CODE VARCHAR2(40 BYTE), 
	  DUE_DATE DATE,
    UPDATE_TIMESTAMP DATE,
    UPDATE_USER VARCHAR2(8 BYTE))
/
INSERT INTO OSP$AWARD_REPORT_TERMS(MIT_AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,UPDATE_TIMESTAMP,UPDATE_USER)
SELECT MIT_AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$AWARD_REPORT_TERMS@coeus.kuali
/
declare
li_commit_count number := 0;
cursor c_data is
  select t1.MIT_AWARD_NUMBER,t1.SEQUENCE_NUMBER,t1.REPORT_CLASS_CODE,t1.REPORT_CODE,t1.FREQUENCY_CODE,t1.FREQUENCY_BASE_CODE,t1.OSP_DISTRIBUTION_CODE,t1.DUE_DATE
  from OSP$AWARD_REPORT_TERMS t1 
  group by t1.MIT_AWARD_NUMBER,t1.SEQUENCE_NUMBER,t1.REPORT_CLASS_CODE,t1.REPORT_CODE,t1.FREQUENCY_CODE,t1.FREQUENCY_BASE_CODE,t1.OSP_DISTRIBUTION_CODE,t1.DUE_DATE
  HAVING count(t1.MIT_AWARD_NUMBER) > 1;
r_data c_data%rowtype;
begin

  if c_data%isopen then
    close c_data;
  end if;
  
  open c_data;
  loop
  fetch c_data into r_data;
  exit when c_data%notfound;
  
    delete from OSP$AWARD_REPORT_TERMS t1 where rowid not in (
    select max(t2.rowid) from OSP$AWARD_REPORT_TERMS t2 where t1.MIT_AWARD_NUMBER = t2.MIT_AWARD_NUMBER
    and t1.SEQUENCE_NUMBER = t2.SEQUENCE_NUMBER 
    and t1.REPORT_CLASS_CODE = t2.REPORT_CLASS_CODE
    and t1.REPORT_CODE = t2.REPORT_CODE
    and t1.FREQUENCY_CODE = t2.FREQUENCY_CODE
    and t1.FREQUENCY_BASE_CODE = t2.FREQUENCY_BASE_CODE
    and t1.OSP_DISTRIBUTION_CODE = t2.OSP_DISTRIBUTION_CODE
    and t1.DUE_DATE = t2.DUE_DATE
    )
    and t1.MIT_AWARD_NUMBER = r_data.MIT_AWARD_NUMBER
    and t1.SEQUENCE_NUMBER = r_data.SEQUENCE_NUMBER 
    and t1.REPORT_CLASS_CODE =r_data.REPORT_CLASS_CODE
    and t1.REPORT_CODE =r_data.REPORT_CODE
    and t1.FREQUENCY_CODE =r_data.FREQUENCY_CODE
    and t1.FREQUENCY_BASE_CODE =r_data.FREQUENCY_BASE_CODE
    and t1.OSP_DISTRIBUTION_CODE =r_data.OSP_DISTRIBUTION_CODE
    and t1.DUE_DATE =r_data.DUE_DATE;
    li_commit_count := li_commit_count + 1;
    
    if li_commit_count = 1000 then
      commit;
      li_commit_count := 0;
    end if;  
  
  end loop;
  close c_data;
  
end;
/
commit
/
DROP TABLE V_AWARD_REPORT_TERMS_RCNT
/
CREATE TABLE V_AWARD_REPORT_TERMS_RCNT 
   (KUALI_AWD VARCHAR2(20 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER(4,0), 
	MIT_SEQUENCE_NUMBER NUMBER(4,0), 
	CHANGED CHAR(1 BYTE), 
	REPORT_CLASS_CODE VARCHAR2(40 BYTE), 
	REPORT_CODE VARCHAR2(40 BYTE), 
	FREQUENCY_CODE VARCHAR2(40 BYTE), 
	FREQUENCY_BASE_CODE VARCHAR2(40 BYTE), 
	OSP_DISTRIBUTION_CODE VARCHAR2(40 BYTE), 
	DUE_DATE DATE, 
	CONTACT_TYPE_CODE NUMBER, 
	ROLODEX_ID NUMBER(6,0), 
	NUMBER_OF_COPIES NUMBER(2,0), 
	MIT_AWARD_NUMBER CHAR(10 BYTE), 
	AWARD_ID NUMBER(22,0), 
	SEQUENCE_NUMBER NUMBER(4,0), 
	UPDATE_TIMESTAMP DATE, 
	UPDATE_USER VARCHAR2(8 BYTE))
/
INSERT INTO V_AWARD_REPORT_TERMS_RCNT(KUALI_AWD,KUALI_SEQUENCE_NUMBER,MIT_SEQUENCE_NUMBER,CHANGED,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,MIT_AWARD_NUMBER,AWARD_ID,SEQUENCE_NUMBER,UPDATE_TIMESTAMP,UPDATE_USER)	
select l.kuali_awd,l.kuali_sequence_number,a.sequence_number  Mit_sequence_number,l.changed,
to_char(a.REPORT_CLASS_CODE) REPORT_CLASS_CODE,
to_char(a.REPORT_CODE) REPORT_CODE,
decode(a.FREQUENCY_CODE,-1,null,to_char(a.FREQUENCY_CODE)) FREQUENCY_CODE,
decode(a.FREQUENCY_BASE_CODE,-1,null,to_char(a.FREQUENCY_BASE_CODE))FREQUENCY_BASE_CODE,
decode(a.OSP_DISTRIBUTION_CODE,-1,null,to_char(a.OSP_DISTRIBUTION_CODE)) OSP_DISTRIBUTION_CODE, 
a.DUE_DATE,
to_char(a.CONTACT_TYPE_CODE) CONTACT_TYPE_CODE, 
decode(a.ROLODEX_ID,-1,0,a.ROLODEX_ID) ROLODEX_ID,
a.NUMBER_OF_COPIES,
a.mit_award_number,aw.AWARD_ID,a.sequence_number,a.update_timestamp,a.update_user 
FROM  TEMP_SEQ_LOG l 
Left outer join OSP$AWARD_REPORT_TERMS@coeus.kuali a on l.module_item_key=a.mit_award_number and l.mit_sequence_number=a.sequence_number
inner join AWARD aw on aw.AWARD_NUMBER=l.KUALI_AWD and aw.SEQUENCE_NUMBER=l.KUALI_SEQUENCE_NUMBER where l.MODULE='AWD'
/
DROP TABLE V_AWARD_REPORT_TERMS 
/
CREATE TABLE V_AWARD_REPORT_TERMS 
   (KUALI_AWD VARCHAR2(20 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER(4,0), 
	MIT_SEQUENCE_NUMBER NUMBER(4,0), 
	CHANGED CHAR(1 BYTE), 
	REPORT_CLASS_CODE VARCHAR2(40 BYTE), 
	REPORT_CODE VARCHAR2(40 BYTE), 
	FREQUENCY_CODE VARCHAR2(40 BYTE), 
	FREQUENCY_BASE_CODE VARCHAR2(40 BYTE), 
	OSP_DISTRIBUTION_CODE VARCHAR2(40 BYTE), 
	DUE_DATE DATE, 
	MIT_AWARD_NUMBER CHAR(10 BYTE), 
	AWARD_ID NUMBER(22,0), 
	SEQUENCE_NUMBER NUMBER(4,0), 
	UPDATE_TIMESTAMP DATE, 
	UPDATE_USER VARCHAR2(8 BYTE))
/
INSERT INTO V_AWARD_REPORT_TERMS(KUALI_AWD,KUALI_SEQUENCE_NUMBER,MIT_SEQUENCE_NUMBER,CHANGED,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,MIT_AWARD_NUMBER,AWARD_ID,SEQUENCE_NUMBER,UPDATE_TIMESTAMP,UPDATE_USER)	
select l.kuali_awd,l.kuali_sequence_number,a.sequence_number  Mit_sequence_number,l.changed,
to_char(a.REPORT_CLASS_CODE) REPORT_CLASS_CODE,
to_char(a.REPORT_CODE) REPORT_CODE,
decode(a.FREQUENCY_CODE,-1,null,to_char(a.FREQUENCY_CODE)) FREQUENCY_CODE,
decode(a.FREQUENCY_BASE_CODE,-1,null,to_char(a.FREQUENCY_BASE_CODE))FREQUENCY_BASE_CODE,
decode(a.OSP_DISTRIBUTION_CODE,-1,null,to_char(a.OSP_DISTRIBUTION_CODE)) OSP_DISTRIBUTION_CODE, 
a.DUE_DATE,
a.mit_award_number,aw.AWARD_ID,a.sequence_number,a.update_timestamp,a.update_user 
FROM  TEMP_SEQ_LOG l 
Left outer join OSP$AWARD_REPORT_TERMS a on l.module_item_key=a.mit_award_number and l.mit_sequence_number=a.sequence_number
inner join AWARD aw on aw.AWARD_NUMBER=l.KUALI_AWD and aw.SEQUENCE_NUMBER=l.KUALI_SEQUENCE_NUMBER where l.MODULE='AWD'
/
CREATE INDEX V_AWARD_REPORT_TERMS_I1 ON V_AWARD_REPORT_TERMS(KUALI_AWD, KUALI_SEQUENCE_NUMBER, MIT_AWARD_NUMBER);
commit;

CREATE INDEX V_AWARD_REPORT_TERMS_I2 ON V_AWARD_REPORT_TERMS(MIT_AWARD_NUMBER);
commit;
CREATE INDEX V_AWARD_REPORT_TERMS_RCNT_I1 ON V_AWARD_REPORT_TERMS_RCNT(KUALI_AWD, KUALI_SEQUENCE_NUMBER, MIT_AWARD_NUMBER);
commit;

CREATE INDEX V_AWARD_REPORT_TERMS_RCNT_I2 ON V_AWARD_REPORT_TERMS_RCNT(MIT_AWARD_NUMBER);
commit
/
DELETE FROM AWARD_REP_TERMS_RECNT
/
DELETE FROM AWARD_REPORT_TERMS
/
DROP TABLE TEMP_AWARD_REPORT_RCNT
/
create table TEMP_AWARD_REPORT_RCNT(
AWARD_ID	NUMBER(22,0),
AWARD_NUMBER	VARCHAR2(12),
SEQUENCE_NUMBER	NUMBER(4,0),
REPORT_CLASS_CODE	VARCHAR2(3),
REPORT_CODE	VARCHAR2(3),
FREQUENCY_CODE	VARCHAR2(3),
FREQUENCY_BASE_CODE	VARCHAR2(3),
OSP_DISTRIBUTION_CODE	VARCHAR2(3),
DUE_DATE	DATE,
CONTACT_TYPE_CODE VARCHAR2(3),
ROLODEX_ID NUMBER(6,0),
NUMBER_OF_COPIES NUMBER(2,0),
VER_NBR	NUMBER(8,0),
UPDATE_TIMESTAMP	DATE,
UPDATE_USER	VARCHAR2(60),
OBJ_ID	VARCHAR2(36)
)
/
COMMIT
/
DROP TABLE TEMP_AWARD_REPORT
/
create table TEMP_AWARD_REPORT(
AWARD_REPORT_TERMS_ID	NUMBER(12,0),
AWARD_ID	NUMBER(22,0),
AWARD_NUMBER	VARCHAR2(12),
SEQUENCE_NUMBER	NUMBER(4,0),
REPORT_CLASS_CODE	VARCHAR2(3),
REPORT_CODE	VARCHAR2(3),
FREQUENCY_CODE	VARCHAR2(3),
FREQUENCY_BASE_CODE	VARCHAR2(3),
OSP_DISTRIBUTION_CODE	VARCHAR2(3),
DUE_DATE	DATE,
VER_NBR	NUMBER(8,0),
UPDATE_TIMESTAMP	DATE,
UPDATE_USER	VARCHAR2(60),
OBJ_ID	VARCHAR2(36)
)
/
COMMIT
/
DROP TABLE TEMP_AWD_REPORT_TERM
/
CREATE TABLE TEMP_AWD_REPORT_TERM 
   (KUALI_AWD VARCHAR2(20 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER, 
	SEQUENC NUMBER(4,0))
/
DROP TABLE TEMP_AWD_REPORT_TERM_RCNT
/
CREATE TABLE TEMP_AWD_REPORT_TERM_RCNT 
   (KUALI_AWD VARCHAR2(20 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER, 
	SEQUENC NUMBER(4,0))
/		
INSERT INTO TEMP_AWD_REPORT_TERM(KUALI_AWD,KUALI_SEQUENCE_NUMBER,SEQUENC)
select kuali_awd,(
select max(aw.sequence_number) from V_AWARD_REPORT_TERMS aw where aw.kuali_awd= v.kuali_awd
and aw.KUALI_SEQUENCE_NUMBER<=v.KUALI_SEQUENCE_NUMBER and aw.mit_award_number is not null)  as kuali_sequence_number,v.KUALI_SEQUENCE_NUMBER SEQUENC  from V_AWARD_REPORT_TERMS v 
where v.mit_award_number is null
/
commit
/ 
INSERT INTO TEMP_AWD_REPORT_TERM_RCNT(KUALI_AWD,KUALI_SEQUENCE_NUMBER,SEQUENC)
select kuali_awd,(
select max(aw.sequence_number) from V_AWARD_REPORT_TERMS_RCNT aw where aw.kuali_awd= v.kuali_awd
and aw.KUALI_SEQUENCE_NUMBER<=v.KUALI_SEQUENCE_NUMBER and aw.mit_award_number is not null)  as kuali_sequence_number,v.KUALI_SEQUENCE_NUMBER SEQUENC  from V_AWARD_REPORT_TERMS_RCNT v 
where v.mit_award_number is null
/
commit
/ 
INSERT INTO TEMP_AWARD_REPORT(AWARD_REPORT_TERMS_ID,AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT SEQUENCE_AWARD_ID.NEXTVAL,a.AWARD_ID,a.kuali_awd,a.kuali_sequence_number,a.REPORT_CLASS_CODE,a.REPORT_CODE,a.FREQUENCY_CODE,a.FREQUENCY_BASE_CODE,a.OSP_DISTRIBUTION_CODE,a.DUE_DATE,1,a.UPDATE_TIMESTAMP,a.UPDATE_USER,sys_guid()
FROM  V_AWARD_REPORT_TERMS a  where  a.mit_award_number IS NOT NULL
/
commit
/
INSERT INTO TEMP_AWARD_REPORT(AWARD_REPORT_TERMS_ID,AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT SEQUENCE_AWARD_ID.NEXTVAL,v1.AWARD_ID,v1.kuali_awd,v2.SEQUENC kuali_sequence_number,v1.REPORT_CLASS_CODE,v1.REPORT_CODE,v1.FREQUENCY_CODE,v1.FREQUENCY_BASE_CODE,v1.OSP_DISTRIBUTION_CODE, v1.DUE_DATE,1,v1.UPDATE_TIMESTAMP,v1.UPDATE_USER,sys_guid()
FROM  V_AWARD_REPORT_TERMS  v1 inner join 
temp_awd_report_term v2 on v1.kuali_awd=v2.kuali_awd and v1.sequence_number=v2.kuali_sequence_number
where v1.changed='N'
/
commit
/
INSERT INTO TEMP_AWARD_REPORT_RCNT(AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT a.AWARD_ID,a.kuali_awd,a.kuali_sequence_number,a.REPORT_CLASS_CODE,a.REPORT_CODE,a.FREQUENCY_CODE,a.FREQUENCY_BASE_CODE,a.OSP_DISTRIBUTION_CODE, a.DUE_DATE,a.CONTACT_TYPE_CODE, a.ROLODEX_ID,a.NUMBER_OF_COPIES,1,a.UPDATE_TIMESTAMP,a.UPDATE_USER,sys_guid()
FROM  V_AWARD_REPORT_TERMS_RCNT a  where  a.mit_award_number IS NOT NULL and a.CONTACT_TYPE_CODE <> -1
/
commit
/
INSERT INTO TEMP_AWARD_REPORT_RCNT(AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT v1.AWARD_ID,v1.kuali_awd,v2.SEQUENC kuali_sequence_number,v1.REPORT_CLASS_CODE,v1.REPORT_CODE,v1.FREQUENCY_CODE,v1.FREQUENCY_BASE_CODE,v1.OSP_DISTRIBUTION_CODE, v1.DUE_DATE,v1.CONTACT_TYPE_CODE, v1.ROLODEX_ID,v1.NUMBER_OF_COPIES,1,v1.UPDATE_TIMESTAMP,v1.UPDATE_USER,sys_guid()
FROM  V_AWARD_REPORT_TERMS_RCNT  v1 inner join 
temp_awd_report_term v2 on v1.kuali_awd=v2.kuali_awd and v1.sequence_number=v2.kuali_sequence_number
where v1.changed='N' and v1.CONTACT_TYPE_CODE <> -1
/
commit
/
INSERT INTO AWARD_REPORT_TERMS(AWARD_REPORT_TERMS_ID,AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT T.AWARD_REPORT_TERMS_ID,T.AWARD_ID,T.AWARD_NUMBER,T.SEQUENCE_NUMBER,T.REPORT_CLASS_CODE,T.REPORT_CODE,T.FREQUENCY_CODE,T.FREQUENCY_BASE_CODE,T.OSP_DISTRIBUTION_CODE,T.DUE_DATE,T.VER_NBR,T.UPDATE_TIMESTAMP,T.UPDATE_USER,T.OBJ_ID
FROM  TEMP_AWARD_REPORT T;            
COMMIT;
INSERT INTO AWARD_REP_TERMS_RECNT(AWARD_REP_TERMS_RECNT_ID,CONTACT_ID,AWARD_REPORT_TERMS_ID,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID) 
SELECT SEQ_AWARD_REP_TERMS_RECNT_ID.NEXTVAL,NULL,Ta.AWARD_REPORT_TERMS_ID,T.CONTACT_TYPE_CODE,T.ROLODEX_ID,T.NUMBER_OF_COPIES,T.VER_NBR,T.UPDATE_TIMESTAMP,T.UPDATE_USER,T.OBJ_ID 
FROM  TEMP_AWARD_REPORT_RCNT T INNER JOIN TEMP_AWARD_REPORT Ta
ON T.AWARD_NUMBER=Ta.AWARD_NUMBER AND T.SEQUENCE_NUMBER=Ta.SEQUENCE_NUMBER AND T.REPORT_CLASS_CODE=Ta.REPORT_CLASS_CODE
AND T.FREQUENCY_CODE=Ta.FREQUENCY_CODE
AND T.FREQUENCY_BASE_CODE=Ta.FREQUENCY_BASE_CODE
AND T.OSP_DISTRIBUTION_CODE=Ta.OSP_DISTRIBUTION_CODE ;
COMMIT
/
update AWARD_REPORT_TERMS pp set pp.AWARD_ID = (select p.AWARD_ID from award p where
p.award_number = pp.award_number
and p.sequence_number = pp.sequence_number
)
/
commit
/
drop table temp_awd_report_term
/
drop table TEMP_AWARD_REPORT
/
INSERT INTO AWARD_REPORT_TERMS(
          AWARD_REPORT_TERMS_ID,
          AWARD_ID,
          AWARD_NUMBER,
          SEQUENCE_NUMBER,
          REPORT_CLASS_CODE,
          REPORT_CODE,
          FREQUENCY_CODE,
          FREQUENCY_BASE_CODE,
          OSP_DISTRIBUTION_CODE,
          DUE_DATE,
          VER_NBR,
          UPDATE_TIMESTAMP,
          UPDATE_USER,
          OBJ_ID
)
select   SEQUENCE_AWARD_ID.NEXTVAL,
          t2.module_id,
          t2.kuali_awd,
          t2.kuali_sequence_number,
          '6',
          1,--
          t1.payment_invoice_freq_code,
          null,
          null,
          null,
          1,
          t1.update_timestamp,
          t1.update_user,
          sys_guid()
from osp$award_header@coeus.kuali t1
inner join TEMP_SEQ_LOG t2 on t2.module_item_key = t1.mit_award_number and t1.sequence_number = t2.mit_sequence_number
left outer join AWARD_REPORT_TERMS t3 on t3.award_id = t2.module_id and  t3.frequency_code = t1.payment_invoice_freq_code and t3.report_class_code = '6'
where t1.payment_invoice_freq_code is not null
and   t3.award_id is null
and   t2.module = 'AWD'
/
commit
/
DECLARE
ls_report_code VARCHAR2(3);
ls_report_code_1 VARCHAR2(3);

BEGIN

SELECT REPORT_CODE INTO ls_report_code FROM REPORT WHERE DESCRIPTION='Non-competing Continuation';
SELECT REPORT_CODE INTO ls_report_code_1  FROM REPORT WHERE DESCRIPTION='Competing Renewal';

 INSERT INTO AWARD_REPORT_TERMS(
          AWARD_REPORT_TERMS_ID,
          AWARD_ID,
          AWARD_NUMBER,
          SEQUENCE_NUMBER,
          REPORT_CLASS_CODE,
          REPORT_CODE,
          FREQUENCY_CODE,
          FREQUENCY_BASE_CODE,
          OSP_DISTRIBUTION_CODE,
          DUE_DATE,
          VER_NBR,
          UPDATE_TIMESTAMP,
          UPDATE_USER,
          OBJ_ID
)
select 
          SEQUENCE_AWARD_ID.NEXTVAL,
          t2.award_id,
          t2.award_number,
          t2.sequence_number,
          '7',--Proposals Due
          ls_report_code,--
          t1.non_competing_cont_prpsl_due,
          null,
          null,
          null,
          1,
          t1.update_timestamp,
          t1.update_user,
          sys_guid()
from osp$award_header@coeus.kuali t1
inner join award t2 on t2.award_number = replace(t1.mit_award_number,'-','-00') and t2.sequence_number=t1.sequence_number
where t1.non_competing_cont_prpsl_due is not null;


commit;

INSERT INTO AWARD_REPORT_TERMS(
          AWARD_REPORT_TERMS_ID,
          AWARD_ID,
          AWARD_NUMBER,
          SEQUENCE_NUMBER,
          REPORT_CLASS_CODE,
          REPORT_CODE,
          FREQUENCY_CODE,
          FREQUENCY_BASE_CODE,
          OSP_DISTRIBUTION_CODE,
          DUE_DATE,
          VER_NBR,
          UPDATE_TIMESTAMP,
          UPDATE_USER,
          OBJ_ID
)
select 
          SEQUENCE_AWARD_ID.NEXTVAL,
          t2.award_id,
          t2.award_number,
          t2.sequence_number,
          '7',--Proposals Due
          ls_report_code_1,--
          t1.competing_renewal_prpsl_due,
          null,
          null,
          null,
          1,
          t1.update_timestamp,
          t1.update_user,
          sys_guid()     
from osp$award_header@coeus.kuali t1
inner join award t2 on t2.award_number = replace(t1.mit_award_number,'-','-00') and t2.sequence_number=t1.sequence_number
where t1.competing_renewal_prpsl_due is not null;
END;
/
UPDATE AWARD_REPORT_TERMS
SET FREQUENCY_BASE_CODE=-1
WHERE FREQUENCY_BASE_CODE IS NULL
AND FREQUENCY_CODE IS NOT NULL
/
commit
/
update AWARD_REPORT_TERMS set OSP_DISTRIBUTION_CODE = null where OSP_DISTRIBUTION_CODE = -1
/
commit
/
update AWARD_REPORT_TERMS set OSP_DISTRIBUTION_CODE = null where OSP_DISTRIBUTION_CODE = -1
/
update AWARD_TEMPLATE_REPORT_TERMS set OSP_DISTRIBUTION_CODE = null where OSP_DISTRIBUTION_CODE = -1
/
delete from DISTRIBUTION where OSP_DISTRIBUTION_CODE = -1
/
commit
/
declare
li_count NUMBER;
begin
select count(rolodex_id) into li_count from rolodex where rolodex_id = 100046;
if li_count = 0 then
  Insert into ROLODEX (ROLODEX_ID,LAST_NAME,FIRST_NAME,MIDDLE_NAME,SUFFIX,PREFIX,TITLE,ORGANIZATION,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,FAX_NUMBER,EMAIL_ADDRESS,CITY,COUNTY,STATE,POSTAL_CODE,COMMENTS,PHONE_NUMBER,COUNTRY_CODE,SPONSOR_CODE,OWNED_BY_UNIT,SPONSOR_ADDRESS_FLAG,DELETE_FLAG,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,ACTV_IND) 
  values (100046,'Place Holder','Payment Invoice Cnct',null,null,null,null,'University',null,null,null,null,null,null,null,null,null,null,null,null,null,'000001','N',null,user,sysdate,user,1,sys_guid(),'Y');

end if;
end;
/
commit
/
ALTER TABLE AWARD_REP_TERMS_RECNT DISABLE CONSTRAINT FK2_AWARD_REP_TERMS_RECNT ;
ALTER TABLE CONTACT_USAGE DISABLE CONSTRAINT FK_CONTACT_TYPE_CODE ;
ALTER TABLE AWARD_TEMPLATE_CONTACT DISABLE CONSTRAINT FK_AWD_TEMPL_CONTACT_TYPE_CODE ;
ALTER TABLE AWARD_TEMPL_REP_TERMS_RECNT DISABLE CONSTRAINT FK2_AWD_TEMPL_REP_TERMS_RECNT ;
ALTER TABLE SUBAWARD_CONTACT DISABLE CONSTRAINT FK_SUBAWARD_CONTACT_CONTACT ;        
DELETE FROM CONTACT_TYPE WHERE DESCRIPTION='Payment Invoice Contact'
/
commit
/
declare
li_count NUMBER;
begin
   select count(CONTACT_TYPE_CODE) into li_count from CONTACT_TYPE where DESCRIPTION='Payment Invoice Contact';
   if li_count = 0 then
      INSERT INTO CONTACT_TYPE(CONTACT_TYPE_CODE,VER_NBR,DESCRIPTION,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
      VALUES((SELECT MAX(to_number(CONTACT_TYPE_CODE))+1 FROM CONTACT_TYPE),1,'Payment Invoice Contact',sysdate,'admin',SYS_GUID());
   end if;
end;   
/
commit
/
ALTER TABLE AWARD_REP_TERMS_RECNT ENABLE CONSTRAINT FK2_AWARD_REP_TERMS_RECNT ;
ALTER TABLE CONTACT_USAGE ENABLE CONSTRAINT FK_CONTACT_TYPE_CODE ;
ALTER TABLE AWARD_TEMPLATE_CONTACT ENABLE CONSTRAINT FK_AWD_TEMPL_CONTACT_TYPE_CODE ;
ALTER TABLE AWARD_TEMPL_REP_TERMS_RECNT ENABLE CONSTRAINT FK2_AWD_TEMPL_REP_TERMS_RECNT ;
ALTER TABLE SUBAWARD_CONTACT ENABLE CONSTRAINT FK_SUBAWARD_CONTACT_CONTACT ;
commit;  
/
declare
li_count number;
begin
  select  count(table_name) into li_count  from user_tables   where table_name = 'OSP$AWARD_HEADER';
  if li_count = 0 then
    execute immediate('CREATE TABLE OSP$AWARD_HEADER 
   ("MIT_AWARD_NUMBER" CHAR(10) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"PROPOSAL_NUMBER" VARCHAR2(8), 
	"TITLE" VARCHAR2(200) NOT NULL ENABLE, 
	"AWARD_TYPE_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"SPECIAL_EB_RATE_OFF_CAMPUS" NUMBER(5,2), 
	"SPECIAL_EB_RATE_ON_CAMPUS" NUMBER(5,2), 
	"PRE_AWARD_AUTHORIZED_AMOUNT" NUMBER(12,2), 
	"PRE_AWARD_EFFECTIVE_DATE" DATE, 
	"CFDA_NUMBER" CHAR(6), 
	"DFAFS_NUMBER" VARCHAR2(20), 
	"SUB_PLAN_FLAG" CHAR(1), 
	"PROCUREMENT_PRIORITY_CODE" VARCHAR2(6), 
	"PRIME_SPONSOR_CODE" CHAR(6), 
	"NON_COMPETING_CONT_PRPSL_DUE" NUMBER(3,0), 
	"COMPETING_RENEWAL_PRPSL_DUE" NUMBER(3,0), 
	"BASIS_OF_PAYMENT_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"METHOD_OF_PAYMENT_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"PAYMENT_INVOICE_FREQ_CODE" NUMBER(3,0), 
	"INVOICE_NUMBER_OF_COPIES" NUMBER(1,0), 
	"FINAL_INVOICE_DUE" NUMBER(3,0), 
	"ACTIVITY_TYPE_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"ACCOUNT_TYPE_CODE" NUMBER(3,0), 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8) NOT NULL ENABLE
   )');
   end if;
  end;
 /
 declare
li_count number;
begin
  select  count(table_name) into li_count  from user_tables   where table_name = 'OSP$AWARD_AMOUNT_INFO';
  if li_count = 0 then
    execute immediate('CREATE TABLE OSP$AWARD_AMOUNT_INFO 
   (	"MIT_AWARD_NUMBER" CHAR(10) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"AMOUNT_SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"ANTICIPATED_TOTAL_AMOUNT" NUMBER(12,2), 
	"ANT_DISTRIBUTABLE_AMOUNT" NUMBER(12,2), 
	"FINAL_EXPIRATION_DATE" DATE, 
	"CURRENT_FUND_EFFECTIVE_DATE" DATE, 
	"AMOUNT_OBLIGATED_TO_DATE" NUMBER(12,2), 
	"OBLI_DISTRIBUTABLE_AMOUNT" NUMBER(12,2), 
	"OBLIGATION_EXPIRATION_DATE" DATE, 
	"TRANSACTION_ID" VARCHAR2(10), 
	"ENTRY_TYPE" CHAR(1), 
	"EOM_PROCESS_FLAG" CHAR(1), 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8) NOT NULL ENABLE, 
	"ANTICIPATED_CHANGE" NUMBER(12,2), 
	"OBLIGATED_CHANGE" NUMBER(12,2), 
	"OBLIGATED_CHANGE_DIRECT" NUMBER(12,2), 
	"OBLIGATED_CHANGE_INDIRECT" NUMBER(12,2), 
	"ANTICIPATED_CHANGE_DIRECT" NUMBER(12,2), 
	"ANTICIPATED_CHANGE_INDIRECT" NUMBER(12,2), 
	"ANTICIPATED_TOTAL_DIRECT" NUMBER(12,2), 
	"ANTICIPATED_TOTAL_INDIRECT" NUMBER(12,2), 
	"OBLIGATED_TOTAL_DIRECT" NUMBER(12,2), 
	"OBLIGATED_TOTAL_INDIRECT" NUMBER(12,2)
   )');
  end if;

 end;
   /
   declare
   li_count number;
   begin
   select  count(*) into li_count  from OSP$AWARD_HEADER;
   if li_count = 0 then
   INSERT INTO OSP$AWARD_HEADER(MIT_AWARD_NUMBER,SEQUENCE_NUMBER,PROPOSAL_NUMBER,TITLE,AWARD_TYPE_CODE,SPECIAL_EB_RATE_OFF_CAMPUS,SPECIAL_EB_RATE_ON_CAMPUS,PRE_AWARD_AUTHORIZED_AMOUNT,PRE_AWARD_EFFECTIVE_DATE,CFDA_NUMBER,DFAFS_NUMBER,SUB_PLAN_FLAG,PROCUREMENT_PRIORITY_CODE,PRIME_SPONSOR_CODE,NON_COMPETING_CONT_PRPSL_DUE,COMPETING_RENEWAL_PRPSL_DUE,BASIS_OF_PAYMENT_CODE,METHOD_OF_PAYMENT_CODE,PAYMENT_INVOICE_FREQ_CODE,INVOICE_NUMBER_OF_COPIES,FINAL_INVOICE_DUE,ACTIVITY_TYPE_CODE,ACCOUNT_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER)
   SELECT MIT_AWARD_NUMBER,SEQUENCE_NUMBER,PROPOSAL_NUMBER,TITLE,AWARD_TYPE_CODE,SPECIAL_EB_RATE_OFF_CAMPUS,SPECIAL_EB_RATE_ON_CAMPUS,PRE_AWARD_AUTHORIZED_AMOUNT,PRE_AWARD_EFFECTIVE_DATE,CFDA_NUMBER,DFAFS_NUMBER,SUB_PLAN_FLAG,PROCUREMENT_PRIORITY_CODE,PRIME_SPONSOR_CODE,NON_COMPETING_CONT_PRPSL_DUE,COMPETING_RENEWAL_PRPSL_DUE,BASIS_OF_PAYMENT_CODE,METHOD_OF_PAYMENT_CODE,PAYMENT_INVOICE_FREQ_CODE,INVOICE_NUMBER_OF_COPIES,FINAL_INVOICE_DUE,ACTIVITY_TYPE_CODE,ACCOUNT_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$AWARD_HEADER@coeus.kuali;  
   end if;
   end;
   /
   declare
   li_count number;
   begin
   select  count(*) into li_count from OSP$AWARD_AMOUNT_INFO;
  if li_count = 0 then
  INSERT INTO OSP$AWARD_AMOUNT_INFO(MIT_AWARD_NUMBER,SEQUENCE_NUMBER,AMOUNT_SEQUENCE_NUMBER,ANTICIPATED_TOTAL_AMOUNT,ANT_DISTRIBUTABLE_AMOUNT,FINAL_EXPIRATION_DATE,CURRENT_FUND_EFFECTIVE_DATE,AMOUNT_OBLIGATED_TO_DATE,OBLI_DISTRIBUTABLE_AMOUNT,OBLIGATION_EXPIRATION_DATE,TRANSACTION_ID,ENTRY_TYPE,EOM_PROCESS_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,ANTICIPATED_CHANGE,OBLIGATED_CHANGE,OBLIGATED_CHANGE_DIRECT,OBLIGATED_CHANGE_INDIRECT,ANTICIPATED_CHANGE_DIRECT,ANTICIPATED_CHANGE_INDIRECT,ANTICIPATED_TOTAL_DIRECT,ANTICIPATED_TOTAL_INDIRECT,OBLIGATED_TOTAL_DIRECT,OBLIGATED_TOTAL_INDIRECT)
  SELECT MIT_AWARD_NUMBER,SEQUENCE_NUMBER,AMOUNT_SEQUENCE_NUMBER,ANTICIPATED_TOTAL_AMOUNT,ANT_DISTRIBUTABLE_AMOUNT,FINAL_EXPIRATION_DATE,CURRENT_FUND_EFFECTIVE_DATE,AMOUNT_OBLIGATED_TO_DATE,OBLI_DISTRIBUTABLE_AMOUNT,OBLIGATION_EXPIRATION_DATE,TRANSACTION_ID,ENTRY_TYPE,EOM_PROCESS_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,ANTICIPATED_CHANGE,OBLIGATED_CHANGE,OBLIGATED_CHANGE_DIRECT,OBLIGATED_CHANGE_INDIRECT,ANTICIPATED_CHANGE_DIRECT,ANTICIPATED_CHANGE_INDIRECT,ANTICIPATED_TOTAL_DIRECT,ANTICIPATED_TOTAL_INDIRECT,OBLIGATED_TOTAL_DIRECT,OBLIGATED_TOTAL_INDIRECT  FROM OSP$AWARD_AMOUNT_INFO@coeus.kuali;
   end if;
   end;
   /
commit
/   
DECLARE
li_count number;
li_report number;
BEGIN
select  count(*) into li_count from REPORT where DESCRIPTION='Payment/Invoice Frequency';
if li_count = 0 then
   SELECT MAX(to_number(REPORT_CODE)) INTO li_report from REPORT;
   li_report:=li_report + 1;
   INSERT INTO REPORT(REPORT_CODE,VER_NBR,DESCRIPTION,FINAL_REPORT_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID,ACTIVE_FLAG)
   VALUES(li_report,1,'Payment/Invoice Frequency','N',SYSDATE,'admin', SYS_GUID(),'Y');
end if;
commit;

select  count(*) into li_count from REPORT where DESCRIPTION='Final Invoice Due';
if li_count = 0 then
   SELECT MAX(to_number(REPORT_CODE)) INTO li_report from REPORT;
   li_report:=li_report + 1;
   INSERT INTO REPORT(REPORT_CODE,VER_NBR,DESCRIPTION,FINAL_REPORT_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID,ACTIVE_FLAG)
   VALUES(li_report,1,'Final Invoice Due','N',SYSDATE,'admin', SYS_GUID(),'Y');
end if;
commit;
END;
/
CREATE INDEX OSP$AWARD_AMOUNT_INFO_I2 ON OSP$AWARD_AMOUNT_INFO(MIT_AWARD_NUMBER,SEQUENCE_NUMBER)
/
CREATE INDEX OSP$AWARD_AMOUNT_INFO_I3 ON OSP$AWARD_AMOUNT_INFO(MIT_AWARD_NUMBER,SEQUENCE_NUMBER,AMOUNT_SEQUENCE_NUMBER)
/
commit
/
DECLARE
ls_report_code VARCHAR2(3);
ls_report_code_1 VARCHAR2(3);

BEGIN


SELECT REPORT_CODE INTO ls_report_code FROM REPORT WHERE DESCRIPTION='Payment/Invoice Frequency';
SELECT REPORT_CODE INTO ls_report_code_1  FROM REPORT WHERE DESCRIPTION='Final Invoice Due';

Insert into VALID_CLASS_REPORT_FREQ (VALID_CLASS_REPORT_FREQ_ID,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
select (select max(VALID_CLASS_REPORT_FREQ_ID) + 1 from VALID_CLASS_REPORT_FREQ) + rownum,
        '6',
        ls_report_code,
        t1.FREQUENCY_CODE,
        sysdate,
        'admin',
        0,
        SYS_GUID()
from 
(select distinct PAYMENT_INVOICE_FREQ_CODE as FREQUENCY_CODE    
      from osp$award_header@coeus.kuali t1
      where t1.PAYMENT_INVOICE_FREQ_CODE is not null)t1;
commit;      
Insert into VALID_CLASS_REPORT_FREQ (VALID_CLASS_REPORT_FREQ_ID,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
values((select max(VALID_CLASS_REPORT_FREQ_ID) + 1 from VALID_CLASS_REPORT_FREQ),'6',ls_report_code_1,'14',sysdate,'admin',0,SYS_GUID());

END;
/
DECLARE
ls_report_code VARCHAR2(3);
li_award_id NUMBER(12,0);
ls_award_number VARCHAR2(16);
li_award_report_terms_id NUMBER(12,0);
li_rolodex_id NUMBER(12,0):=100046;
ls_contact VARCHAR2(3);
ls_FREQUENCY_BASE_CODE FREQUENCY_BASE.FREQUENCY_BASE_CODE%type;

CURSOR c_invoice IS
SELECT MIT_AWARD_NUMBER,SEQUENCE_NUMBER,PAYMENT_INVOICE_FREQ_CODE,INVOICE_NUMBER_OF_COPIES,FINAL_INVOICE_DUE FROM OSP$AWARD_HEADER
WHERE PAYMENT_INVOICE_FREQ_CODE IS NOT NULL;
r_invoice c_invoice%ROWTYPE;

BEGIN
SELECT REPORT_CODE INTO ls_report_code FROM REPORT WHERE DESCRIPTION='Payment/Invoice Frequency';

--select FREQUENCY_BASE_CODE into ls_FREQUENCY_BASE_CODE from FREQUENCY_BASE where DESCRIPTION='As Required'

IF c_invoice%ISOPEN THEN
CLOSE c_invoice;
END IF;
OPEN c_invoice;
LOOP
FETCH c_invoice INTO r_invoice;
EXIT WHEN c_invoice%NOTFOUND;


  
  SELECT SEQUENCE_AWARD_ID.NEXTVAL INTO li_award_report_terms_id FROM DUAL;
  ls_award_number:=replace(r_invoice.MIT_AWARD_NUMBER,'-','-00');
  BEGIN
  SELECT AWARD_ID INTO li_award_id FROM AWARD WHERE AWARD_NUMBER=ls_award_number AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER;
  EXCEPTION
  WHEN OTHERS THEN
    BEGIN
	  SELECT CHANGE_AWARD_NUMBER into ls_award_number FROM KC_MIG_AWARD_CONV WHERE AWARD_NUMBER=ls_award_number;
	  SELECT AWARD_ID INTO li_award_id FROM AWARD WHERE AWARD_NUMBER=ls_award_number AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER;
	EXCEPTION
	WHEN OTHERS THEN
	  dbms_output.put_line(ls_award_number||' '||r_invoice.SEQUENCE_NUMBER);
	  CONTINUE;
	END;  
  
  END;


 INSERT INTO AWARD_REPORT_TERMS(AWARD_REPORT_TERMS_ID,AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
 VALUES(li_award_report_terms_id,li_award_id,ls_award_number,r_invoice.SEQUENCE_NUMBER,'6',ls_report_code,r_invoice.PAYMENT_INVOICE_FREQ_CODE,NULL,NULL,NULL,1,SYSDATE,'admin',SYS_GUID());
 
 SELECT CONTACT_TYPE_CODE INTO  ls_contact FROM CONTACT_TYPE WHERE DESCRIPTION='Payment Invoice Contact';
 
 
  IF  r_invoice.INVOICE_NUMBER_OF_COPIES IS NOT NULL THEN
  
    INSERT INTO AWARD_REP_TERMS_RECNT(AWARD_REP_TERMS_RECNT_ID,CONTACT_ID,AWARD_REPORT_TERMS_ID,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
	VALUES(SEQ_AWARD_REP_TERMS_RECNT_ID.NEXTVAL,NULL,li_award_report_terms_id,ls_contact,li_rolodex_id,r_invoice.INVOICE_NUMBER_OF_COPIES,1,SYSDATE,'admin',SYS_GUID());
   
  END IF;
  
END LOOP;
CLOSE c_invoice;
END;
/
DECLARE

ls_report_code_1 VARCHAR2(3);
li_award_id NUMBER(12,0);
ls_award_number VARCHAR2(16);
li_award_report_terms_id NUMBER(12,0);
li_rolodex_id NUMBER(12,0):=100046;
ll_date DATE;
ls_contact VARCHAR2(3);
li_due number;

CURSOR c_invoice IS
SELECT MIT_AWARD_NUMBER,SEQUENCE_NUMBER,PAYMENT_INVOICE_FREQ_CODE,INVOICE_NUMBER_OF_COPIES,FINAL_INVOICE_DUE FROM OSP$AWARD_HEADER
WHERE FINAL_INVOICE_DUE IS NOT NULL;
r_invoice c_invoice%ROWTYPE;

BEGIN

SELECT REPORT_CODE INTO ls_report_code_1  FROM REPORT WHERE DESCRIPTION='Final Invoice Due';

IF c_invoice%ISOPEN THEN
CLOSE c_invoice;
END IF;
OPEN c_invoice;
LOOP
FETCH c_invoice INTO r_invoice;
EXIT WHEN c_invoice%NOTFOUND;

begin
li_due:=to_number(r_invoice.FINAL_INVOICE_DUE);
exception
when others then
li_due:=0;
end;
   
  IF r_invoice.INVOICE_NUMBER_OF_COPIES IS NOT NULL OR r_invoice.FINAL_INVOICE_DUE IS NOT NULL THEN
   
     
  
  SELECT SEQUENCE_AWARD_ID.NEXTVAL INTO li_award_report_terms_id FROM DUAL;
  BEGIN
  SELECT to_date(FINAL_EXPIRATION_DATE) INTO ll_date FROM OSP$AWARD_AMOUNT_INFO WHERE MIT_AWARD_NUMBER=r_invoice.MIT_AWARD_NUMBER AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER
  AND AMOUNT_SEQUENCE_NUMBER=(SELECT MAX(AMOUNT_SEQUENCE_NUMBER) FROM OSP$AWARD_AMOUNT_INFO WHERE MIT_AWARD_NUMBER=r_invoice.MIT_AWARD_NUMBER AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER);
  EXCEPTION
  WHEN OTHERS THEN
  ll_date:=NULL;
  END;
  
  if ll_date is not null then
  
   ll_date:= ll_date + li_due;
   
  end if; 
  
  ls_award_number:=replace(r_invoice.MIT_AWARD_NUMBER,'-','-00');
  BEGIN
  SELECT AWARD_ID INTO li_award_id FROM AWARD WHERE AWARD_NUMBER=ls_award_number AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER;
  EXCEPTION
  WHEN OTHERS THEN  
	  BEGIN
	  SELECT CHANGE_AWARD_NUMBER into ls_award_number FROM KC_MIG_AWARD_CONV WHERE AWARD_NUMBER=ls_award_number;
	  SELECT AWARD_ID INTO li_award_id FROM AWARD WHERE AWARD_NUMBER=ls_award_number AND SEQUENCE_NUMBER=r_invoice.SEQUENCE_NUMBER;
	  EXCEPTION
	  WHEN OTHERS THEN
	  dbms_output.put_line(ls_award_number||' '||r_invoice.SEQUENCE_NUMBER);
	  CONTINUE;
	  END;
  END;
SELECT CONTACT_TYPE_CODE INTO  ls_contact FROM CONTACT_TYPE WHERE DESCRIPTION='Payment Invoice Contact';
BEGIN
 INSERT INTO AWARD_REPORT_TERMS(AWARD_REPORT_TERMS_ID,AWARD_ID,AWARD_NUMBER,SEQUENCE_NUMBER,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE,DUE_DATE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
 VALUES(li_award_report_terms_id,li_award_id,ls_award_number,r_invoice.SEQUENCE_NUMBER,'6',ls_report_code_1,14,6,NULL,ll_date,1,SYSDATE,'admin',SYS_GUID());
 
 INSERT INTO AWARD_REP_TERMS_RECNT(AWARD_REP_TERMS_RECNT_ID,CONTACT_ID,AWARD_REPORT_TERMS_ID,CONTACT_TYPE_CODE,ROLODEX_ID,NUMBER_OF_COPIES,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
 VALUES(SEQ_AWARD_REP_TERMS_RECNT_ID.NEXTVAL,NULL,li_award_report_terms_id,ls_contact,li_rolodex_id,r_invoice.INVOICE_NUMBER_OF_COPIES,1,SYSDATE,'admin',SYS_GUID());
EXCEPTION
WHEN OTHERS THEN
dbms_output.put_line('DUE_DATE:'||ll_date||'MIT_AWARD_NUMBER:'||r_invoice.MIT_AWARD_NUMBER||'SEQUENCE_NUMBER:'||r_invoice.SEQUENCE_NUMBER);
END;
END IF;  
END LOOP;
CLOSE c_invoice;
END;
/
create index AWARD_REP_I1 ON AWARD_REPORT_TERMS(AWARD_ID,REPORT_CLASS_CODE,REPORT_CODE,FREQUENCY_CODE,FREQUENCY_BASE_CODE,OSP_DISTRIBUTION_CODE);

create index AWARD_REP_TERMS_I1 ON AWARD_REP_TERMS_RECNT(AWARD_REPORT_TERMS_ID,CONTACT_TYPE_CODE,ROLODEX_ID);
commit;
/
DELETE FROM AWARD_REP_TERMS_RECNT WHERE AWARD_REPORT_TERMS_ID IN(SELECT AWARD_REPORT_TERMS_ID FROM AWARD_REPORT_TERMS a INNER JOIN REPORT r ON a.REPORT_CODE=r.REPORT_CODE AND a.REPORT_CLASS_CODE=6
WHERE r.DESCRIPTION NOT IN('Payment/Invoice Frequency','Final Invoice Due'))
/
DELETE FROM AWARD_REPORT_TERMS WHERE REPORT_CLASS_CODE=6 AND REPORT_CODE NOT IN(SELECT REPORT_CODE FROM REPORT WHERE DESCRIPTION IN('Payment/Invoice Frequency','Final Invoice Due'))
/
DELETE FROM valid_class_report_freq WHERE REPORT_CLASS_CODE=6 AND REPORT_CODE NOT IN(SELECT REPORT_CODE FROM REPORT WHERE DESCRIPTION IN('Payment/Invoice Frequency','Final Invoice Due'))
/
